{"version":3,"file":"static/js/520.9f0795fb.chunk.js","mappings":"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","sources":["apollo/queryString.ts","pages/issueDetail/components/commentItem.styles.ts","pages/issueDetail/components/CommentItem.tsx","pages/issueDetail/issueDetailsPage.styles.ts","pages/issueDetail/IssueDetailsPage.tsx","utils/hooks/useFetchIssueDetails.ts","utils/types/issues.ts","utils/hooks/useSearchIssue.ts"],"sourcesContent":["import gql from \"graphql-tag\";\n\nexport const GET_ISSUES_OF_REPOSITORY = gql`\n  query getRepoIssues(\n    $repositoryOwner: String!\n    $repositoryName: String!\n    $issueState: IssueState!\n    $cursor: String\n    $pageSize: Int = 10\n  ) {\n    repository(name: $repositoryName, owner: $repositoryOwner) {\n      issues(last: $pageSize, states: [$issueState], before: $cursor) {\n        edges {\n          node {\n            id\n            number\n            state\n            title\n            url\n            bodyHTML\n            closed\n            createdAt\n            closedAt\n            author {\n              login\n              avatarUrl\n              url\n            }\n            comments(last: $pageSize) {\n              totalCount\n              edges {\n                node {\n                  bodyHTML\n                  createdAt\n                  author {\n                    login\n                    avatarUrl\n                    url\n                  }\n                }\n              }\n            }\n          }\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n          startCursor\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_ISSUE = gql`\n  query FindIssueID(\n    $repositoryOwner: String!\n    $repositoryName: String!\n    $issueNumber: Int!\n    $pageSize: Int = 10\n  ) {\n    repository(name: $repositoryName, owner: $repositoryOwner) {\n      issue(number: $issueNumber) {\n        id\n        number\n        state\n        title\n        url\n        bodyHTML\n        closed\n        createdAt\n        closedAt\n        author {\n          login\n          avatarUrl\n          url\n        }\n        comments(first: $pageSize) {\n          totalCount\n          pageInfo {\n            endCursor\n            hasNextPage\n            startCursor\n          }\n          edges {\n            node {\n              bodyHTML\n              createdAt\n              author {\n                login\n                avatarUrl\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const SEARCH_FOR_ISSUE = gql`\n  query searchIssue($text: String!, $cursor: String, $pageSize: Int = 10) {\n    search(first: $pageSize, query: $text, type: ISSUE, after: $cursor) {\n      pageInfo {\n        endCursor\n        hasNextPage\n        startCursor\n      }\n      nodes {\n        ... on Issue {\n          id\n          number\n          state\n          title\n          url\n          bodyHTML\n          closed\n          createdAt\n          closedAt\n          author {\n            login\n            avatarUrl\n            url\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_COMMENTS_OF_ISSUE = gql`\n  query fetchComments(\n    $repositoryOwner: String!\n    $repositoryName: String!\n    $issueNumber: Int!\n    $cursor: String\n    $pageSize: Int = 10\n  ) {\n    repository(name: $repositoryName, owner: $repositoryOwner) {\n      issue(number: $issueNumber) {\n        id\n        comments(first: $pageSize, after: $cursor) {\n          edges {\n            node {\n              id\n              bodyHTML\n              author {\n                login\n              }\n            }\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n            startCursor\n          }\n        }\n      }\n    }\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const CommentItemWrapper = styled.div`\n  border: 2px solid #e5e5e5;\n  border-radius: 5px;\n  padding: 5px 10px;\n  margin-bottom: 10px;\n  .content {\n    max-height: 30vh;\n    overflow-y: auto;\n    margin: 0px;\n    padding: 0px;\n    font-size: 14px;\n  }\n  .sub-text {\n    font-size: 14px;\n    color: grey;\n  }\n`;\n","import moment from \"moment\";\nimport { Comment } from \"../../../utils\";\nimport { CommentItemWrapper } from \"./commentItem.styles\";\n\ninterface CommentItemProps {\n  comment: Comment;\n}\n\nexport const CommentItem: React.FC<CommentItemProps> = ({ comment }) => {\n  const { bodyHTML, author: { login } = {}, createdAt } = comment.node;\n  const subText = `Commented ${moment(createdAt).fromNow()} by ${login}`;\n  return (\n    <CommentItemWrapper>\n      <div\n        className=\"content\"\n        dangerouslySetInnerHTML={{ __html: bodyHTML as string }}\n      />\n      <div className=\"sub-text\">{subText}</div>\n    </CommentItemWrapper>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const IssueDetailsWrapper = styled.div`\n  margin: 20px 10px;\n  .title {\n    font-size: 20px;\n    font-weight: bold;\n    color: #333;\n    border: 2px solid #e5e5e5;\n    border-radius: 5px;\n    padding: 5px 10px;\n    display: flex;\n    justify-content: space-between;\n    .author {\n      font-size: 18px;\n      color: grey;\n      margin-right: 10px;\n    }\n  }\n  .body {\n    margin-top: 10px;\n    font-size: 16px;\n    color: #222;\n    border: 2px solid #e5e5e5;\n    border-radius: 5px;\n    padding: 5px 10px;\n    max-height: 80vh;\n    overflow-y: auto;\n  }\n  .comments {\n    margin: 15px 0px 0px 20px;\n  }\n  .fetch-more {\n    margin-top: 10px;\n    display: flex;\n    justify-content: center;\n  }\n`;\n","import { useFetchIssueDetails } from \"../../utils/hooks/useFetchIssueDetails\";\nimport React from \"react\";\nimport { CommentItem } from \"./components/CommentItem\";\nimport { ShouldRender, Loading } from \"../shared\";\nimport { IssueDetailsWrapper } from \"./issueDetailsPage.styles\";\nimport { Button } from \"@mui/material\";\n\ninterface IssueDetailsProps {}\n\nexport const IssueDetailsPage: React.FC<IssueDetailsProps> = () => {\n  const {\n    issue,\n    comments,\n    isLoading,\n    hasMoreComments,\n    loadingComments,\n    fetchMoreComments,\n  } = useFetchIssueDetails?.() || {};\n\n  const { title, bodyHTML, author } = issue || {};\n  const { login } = author || {};\n  return (\n    <IssueDetailsWrapper>\n      <ShouldRender if={isLoading}>\n        <Loading />\n      </ShouldRender>\n      <ShouldRender if={!isLoading}>\n        <>\n          <div className=\"title\">\n            {title} <span className=\"author\">Created by {login}</span>\n          </div>\n          <div\n            className=\"body\"\n            dangerouslySetInnerHTML={{ __html: bodyHTML as string }}\n          />\n          <div className=\"comments\">\n            {comments?.map((comment, index) => (\n              <CommentItem key={index} comment={comment} />\n            ))}\n          </div>\n          <div className=\"fetch-more\">\n            <Button\n              variant=\"outlined\"\n              color=\"info\"\n              size=\"small\"\n              disabled={!hasMoreComments || loadingComments}\n              onClick={fetchMoreComments}\n            >\n              {`${\n                loadingComments || isLoading\n                  ? \"Loading..\"\n                  : \"Fetch more comments\"\n              }`}\n            </Button>\n          </div>\n        </>\n      </ShouldRender>\n    </IssueDetailsWrapper>\n  );\n};\n","import { GetIssueData, Issue, Comment, PAGE_SIZE } from \"../../utils\";\nimport { useLocation } from \"react-router-dom\";\nimport { useLazyQuery, useQuery } from \"@apollo/client\";\nimport { GET_ISSUE, GET_COMMENTS_OF_ISSUE } from \"../../apollo\";\nimport { useCallback, useState } from \"react\";\nimport Materilize from \"materialize-css\";\n\ninterface useFetchIssueDetailsResponse {\n  issue: Issue;\n  comments: Comment[];\n  isError: boolean;\n  isLoading: boolean;\n  hasMoreComments: boolean;\n  loadingComments: boolean;\n  fetchMoreComments: () => void;\n}\n\nexport const useFetchIssueDetails = (): useFetchIssueDetailsResponse => {\n  const { pathname } = useLocation();\n  const [data, setData] = useState<Issue>(null as unknown as Issue);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [commentsCursor, setCommentsCursor] = useState<String | null>();\n\n  const [org, repo, _, issueNum] = pathname.split(\"/\").slice(1);\n\n  const { loading, error } = useQuery<GetIssueData>(GET_ISSUE, {\n    variables: {\n      repositoryName: repo,\n      repositoryOwner: org,\n      issueNumber: parseInt(issueNum),\n      pageSize: PAGE_SIZE,\n    },\n    onCompleted: (data) => {\n      setData(data.repository.issue);\n      const comments = data.repository.issue.comments.edges;\n      comments && setComments((prev) => [...prev, ...comments]);\n      const cursor = data.repository.issue.comments.pageInfo.endCursor;\n      setCommentsCursor(cursor);\n    },\n    onError: (err) => {\n      Materilize.toast({ html: err.message });\n    },\n  });\n\n  const [fetchComments, { loading: fetchingComments }] = useLazyQuery(\n    GET_COMMENTS_OF_ISSUE,\n    {\n      onCompleted: (data) => {\n        const newComments = data.repository.issue.comments.edges;\n        setComments((prev) => [...prev, ...newComments]);\n        const newCursor = data.repository.issue.comments.pageInfo.endCursor;\n        setCommentsCursor(newCursor);\n      },\n      onError: (err) => {\n        Materilize.toast({ html: err.message });\n      },\n    }\n  );\n\n  const fetchMoreComments = useCallback(() => {\n    fetchComments({\n      variables: {\n        repositoryName: repo,\n        repositoryOwner: org,\n        issueNumber: parseInt(issueNum),\n        cursor: commentsCursor,\n        pageSize: PAGE_SIZE,\n      },\n    });\n  }, [commentsCursor, fetchComments, issueNum, org, repo]);\n\n  return {\n    issue: data as Issue,\n    hasMoreComments: !!commentsCursor && comments.length >= PAGE_SIZE,\n    comments,\n    isLoading: loading,\n    isError: !!error,\n    fetchMoreComments,\n    loadingComments: fetchingComments,\n  };\n};\n","export enum IssueState {\n  OPEN = \"OPEN\",\n  CLOSE = \"CLOSE\",\n}\n\nexport interface Actor {\n  login: String;\n  avatarUrl: String;\n  url: String;\n}\n\nexport interface Comment {\n  node: {\n    bodyHTML: String;\n    author: Actor;\n    createdAt: Date;\n  };\n}\nexport interface Comments {\n  totalCount: number;\n  edges?: Comment[];\n  pageInfo: PageInfo;\n}\n\nexport interface Issue {\n  id: String;\n  number: String;\n  state: IssueState;\n  title: String;\n  url: String;\n  bodyHTML: String;\n  closed: Boolean;\n  closedAt: String;\n  createdAt: Date;\n  author: Actor;\n  comments: Comments;\n}\n\nexport interface PageInfo {\n  endCursor: String;\n  hasNextPage: Boolean;\n  startCursor: String;\n}\n\nexport interface GetIssuesData {\n  repository: {\n    issues: {\n      edges: [\n        {\n          node: Issue;\n        }\n      ];\n      pageInfo: PageInfo;\n    };\n  };\n}\n\nexport interface SearchIssuesData {\n  search: {\n    nodes: [Issue];\n    pageInfo: PageInfo;\n  };\n}\n\nexport interface GetIssueData {\n  repository: {\n    issue: Issue;\n  };\n}\n\nexport interface GetIssueCommentsData {\n  repository: {\n    issue: {\n      comments: Comments;\n    };\n  };\n}\n","import { useLazyQuery, useQuery } from \"@apollo/client\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { GET_ISSUES_OF_REPOSITORY, SEARCH_FOR_ISSUE } from \"../../apollo\";\nimport { GetIssuesData, Issue, SearchIssuesData, PAGE_SIZE } from \"../../utils\";\nimport { useLocation } from \"react-router-dom\";\nimport Materilize from \"materialize-css\";\n\ninterface SearchInput {\n  isOpen: boolean;\n  isNextPage?: boolean;\n}\n\ninterface userSearchIssueResponse {\n  search: (props: SearchInput) => void;\n  gotoNextPage: (isOpen: boolean) => void;\n  gotoPrevPage: () => void;\n  data: Issue[];\n  isError: boolean;\n  isLoading: boolean;\n  currentPage: number;\n  hasMore: boolean;\n  setSearchText: React.Dispatch<React.SetStateAction<string>>;\n}\n\nexport const useSearchIssues = (): userSearchIssueResponse => {\n  const [result, setResult] = useState<Issue[]>([]);\n  const [searchResult, setSearchResult] = useState<Issue[]>([]);\n\n  const [isSearchActive, setIsSearchActive] = useState(false);\n\n  const [nextPage, setNextPage] = useState<null | String>(null);\n  const [searchNextPage, setSearchNextPage] = useState<null | String>(null);\n  const [currentPage, setCurrentPage] = useState<number>(0);\n\n  const [searchText, setSearchText] = useState(\"\");\n\n  const { pathname } = useLocation();\n  const [org, repo] = pathname.split(\"/\").slice(1, 3);\n  //helpers\n  const incrementPageNumber = useCallback(() => {\n    setCurrentPage((prev) => prev + 1);\n  }, []);\n  const resetPageNumber = useCallback(() => {\n    setCurrentPage(0);\n  }, []);\n  const decrementPageNumber = useCallback(() => {\n    setCurrentPage((prev) => prev - 1);\n  }, []);\n\n  const [searchIssues, { error: searchError, loading: searching }] =\n    useLazyQuery<SearchIssuesData>(SEARCH_FOR_ISSUE, {\n      onCompleted: (data) => {\n        const newItems = data.search.nodes;\n        newItems.length && incrementPageNumber();\n        const newArr = [...searchResult, ...newItems];\n        setSearchResult(newArr);\n        setSearchNextPage(data.search.pageInfo.endCursor);\n      },\n      onError: (err) => {\n        Materilize.toast({ html: err.message });\n      },\n      fetchPolicy: \"network-only\",\n    });\n\n  const {\n    error: intialLoadError,\n    loading,\n    refetch,\n  } = useQuery<GetIssuesData>(GET_ISSUES_OF_REPOSITORY, {\n    variables: {\n      repositoryOwner: org,\n      repositoryName: repo,\n      pageSize: PAGE_SIZE,\n      issueState: \"OPEN\",\n    },\n    fetchPolicy: \"cache-first\",\n    onCompleted: (data) => {\n      const newItems = data.repository.issues.edges.map((edge) => edge.node);\n      newItems.reverse();\n      newItems.length && incrementPageNumber();\n      setResult((prev) => [...prev, ...newItems]);\n      setNextPage(data.repository.issues.pageInfo.startCursor);\n    },\n    onError: (err) => {\n      Materilize.toast({ html: err.message });\n    },\n  });\n\n  const search = useCallback(\n    ({ isOpen, isNextPage }: SearchInput) => {\n      setIsSearchActive(!!searchText);\n      if (!searchText) return;\n\n      let query = `repo:${org}/${repo} type:issue ${searchText} state:${\n        isOpen ? \"open\" : \"closed\"\n      }`;\n\n      if (!isNextPage) {\n        resetPageNumber();\n        setSearchNextPage(null);\n        setSearchResult([]);\n      }\n\n      searchIssues({\n        variables: {\n          text: query,\n          pageSize: PAGE_SIZE,\n          cursor: isNextPage && searchNextPage,\n        },\n      });\n    },\n    [org, repo, resetPageNumber, searchIssues, searchNextPage, searchText]\n  );\n\n  const getNextPageForSearch = useCallback(\n    (isOpen: boolean) => {\n      search({ isNextPage: true, isOpen: isOpen });\n    },\n    [search]\n  );\n\n  const gotoNextPage = useCallback(\n    (isOpen: boolean) => {\n      if ((isSearchActive && searching) || (loading && !isSearchActive)) return;\n      if (searchText) {\n        const nextPageDataExist = searchResult.length > currentPage * PAGE_SIZE;\n        nextPageDataExist\n          ? incrementPageNumber()\n          : getNextPageForSearch(isOpen);\n      } else {\n        const nextPageDataExist = result.length > currentPage * PAGE_SIZE;\n        nextPageDataExist\n          ? incrementPageNumber()\n          : refetch({ cursor: nextPage });\n      }\n    },\n    [\n      currentPage,\n      getNextPageForSearch,\n      incrementPageNumber,\n      isSearchActive,\n      loading,\n      nextPage,\n      refetch,\n      result.length,\n      searchResult.length,\n      searchText,\n      searching,\n    ]\n  );\n\n  useEffect(() => {\n    !searchText && setIsSearchActive(false);\n  }, [searchText]);\n\n  const isError = !!(searchError || intialLoadError);\n  const isLoading = loading || searching;\n\n  const startIndex = ((currentPage || 1) - 1) * PAGE_SIZE;\n  const endIndex = startIndex + PAGE_SIZE;\n  const resultArr = isSearchActive ? searchResult : result;\n\n  return {\n    search,\n    data: resultArr.slice(startIndex, endIndex),\n    currentPage,\n    hasMore: searchText ? !!searchNextPage : !!nextPage,\n    isError,\n    isLoading,\n    gotoNextPage,\n    gotoPrevPage: decrementPageNumber,\n    setSearchText,\n  };\n};\n"],"names":["GET_ISSUES_OF_REPOSITORY","gql","GET_ISSUE","SEARCH_FOR_ISSUE","GET_COMMENTS_OF_ISSUE","CommentItemWrapper","styled","CommentItem","comment","node","bodyHTML","author","login","createdAt","subText","moment","fromNow","className","dangerouslySetInnerHTML","__html","IssueDetailsWrapper","IssueDetailsPage","useFetchIssueDetails","issue","comments","isLoading","hasMoreComments","loadingComments","fetchMoreComments","title","if","map","index","Button","variant","color","size","disabled","onClick","pathname","useLocation","useState","data","setData","setComments","commentsCursor","setCommentsCursor","split","slice","org","repo","issueNum","useQuery","variables","repositoryName","repositoryOwner","issueNumber","parseInt","pageSize","PAGE_SIZE","onCompleted","repository","edges","prev","cursor","pageInfo","endCursor","onError","err","Materilize","html","message","loading","error","useLazyQuery","newComments","newCursor","fetchComments","fetchingComments","useCallback","length","isError","IssueState","useSearchIssues","result","setResult","searchResult","setSearchResult","isSearchActive","setIsSearchActive","nextPage","setNextPage","searchNextPage","setSearchNextPage","currentPage","setCurrentPage","searchText","setSearchText","incrementPageNumber","resetPageNumber","decrementPageNumber","newItems","search","nodes","newArr","fetchPolicy","searchIssues","searchError","searching","issueState","issues","edge","reverse","startCursor","intialLoadError","refetch","isOpen","isNextPage","query","text","getNextPageForSearch","gotoNextPage","useEffect","startIndex","endIndex","hasMore","gotoPrevPage"],"sourceRoot":""}