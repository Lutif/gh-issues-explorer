{"version":3,"file":"static/js/716.caec56f3.chunk.js","mappings":"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","sources":["apollo/queryString.ts","pages/search/components/issueListItem.styled.ts","pages/search/components/IssueListItem.tsx","pages/search/components/Searchbar.tsx","pages/search/searchPage.styles.ts","pages/search/SearchPage.tsx","utils/hooks/useFetchIssueDetails.ts","utils/types/issues.ts","utils/hooks/useSearchIssue.ts"],"sourcesContent":["import gql from \"graphql-tag\";\n\nexport const GET_ISSUES_OF_REPOSITORY = gql`\n  query getRepoIssues(\n    $repositoryOwner: String!\n    $repositoryName: String!\n    $issueState: IssueState!\n    $cursor: String\n    $pageSize: Int = 10\n  ) {\n    repository(name: $repositoryName, owner: $repositoryOwner) {\n      issues(last: $pageSize, states: [$issueState], before: $cursor) {\n        edges {\n          node {\n            id\n            number\n            state\n            title\n            url\n            bodyHTML\n            closed\n            createdAt\n            closedAt\n            author {\n              login\n              avatarUrl\n              url\n            }\n            comments(last: $pageSize) {\n              totalCount\n              edges {\n                node {\n                  bodyHTML\n                  createdAt\n                  author {\n                    login\n                    avatarUrl\n                    url\n                  }\n                }\n              }\n            }\n          }\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n          startCursor\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_ISSUE = gql`\n  query FindIssueID(\n    $repositoryOwner: String!\n    $repositoryName: String!\n    $issueNumber: Int!\n    $pageSize: Int = 10\n  ) {\n    repository(name: $repositoryName, owner: $repositoryOwner) {\n      issue(number: $issueNumber) {\n        id\n        number\n        state\n        title\n        url\n        bodyHTML\n        closed\n        createdAt\n        closedAt\n        author {\n          login\n          avatarUrl\n          url\n        }\n        comments(first: $pageSize) {\n          totalCount\n          pageInfo {\n            endCursor\n            hasNextPage\n            startCursor\n          }\n          edges {\n            node {\n              bodyHTML\n              createdAt\n              author {\n                login\n                avatarUrl\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const SEARCH_FOR_ISSUE = gql`\n  query searchIssue($text: String!, $cursor: String, $pageSize: Int = 10) {\n    search(first: $pageSize, query: $text, type: ISSUE, after: $cursor) {\n      pageInfo {\n        endCursor\n        hasNextPage\n        startCursor\n      }\n      nodes {\n        ... on Issue {\n          id\n          number\n          state\n          title\n          url\n          bodyHTML\n          closed\n          createdAt\n          closedAt\n          author {\n            login\n            avatarUrl\n            url\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_COMMENTS_OF_ISSUE = gql`\n  query fetchComments(\n    $repositoryOwner: String!\n    $repositoryName: String!\n    $issueNumber: Int!\n    $cursor: String\n    $pageSize: Int = 10\n  ) {\n    repository(name: $repositoryName, owner: $repositoryOwner) {\n      issue(number: $issueNumber) {\n        id\n        comments(first: $pageSize, after: $cursor) {\n          edges {\n            node {\n              id\n              bodyHTML\n              author {\n                login\n              }\n            }\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n            startCursor\n          }\n        }\n      }\n    }\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const IssueListItemWrapper = styled.div`\n  margin-top: 15px;\n  border-bottom: 1px solid grey;\n  cursor: pointer;\n  padding: 0px 10px;\n  .title {\n    font-size: 16px;\n  }\n\n  .details {\n    font-size: 14px;\n    color: grey;\n  }\n`;\n","import React from \"react\";\nimport { Issue } from \"../../../utils\";\nimport moment from \"moment\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { IssueListItemWrapper } from \"./issueListItem.styled\";\n\ninterface IssueListItemProps {\n  issue: Issue;\n}\n\nexport const IssueListItem: React.FC<IssueListItemProps> = ({ issue }) => {\n  const {\n    title,\n    state,\n    createdAt,\n    author,\n    comments: { totalCount: totalComments } = {},\n  } = issue;\n  const login = author || {};\n  const history = useHistory();\n  const { pathname } = useLocation();\n\n  const gotoIssueDetail = () => history.push(`${pathname}/${issue.number}`);\n\n  const content = `#${issue.number} ${\"Opened\"} ${moment(\n    createdAt\n  ).fromNow()} by ${login}`;\n\n  return (\n    <IssueListItemWrapper onClick={gotoIssueDetail}>\n      <div className=\"title\">{title}</div>\n      <div className=\"details\">{content}</div>\n      <div>\n        {totalComments || 0} comments | {state}{\" \"}\n      </div>\n    </IssueListItemWrapper>\n  );\n};\n","import React from \"react\";\nimport TextField from \"@mui/material/TextField\";\n\ninterface SearchBarProps {\n  setSearchText: (text: string) => void;\n  performSearch: () => void;\n}\n\nexport const SearchBar: React.FC<SearchBarProps> = ({\n  setSearchText,\n  performSearch,\n}) => {\n  return (\n    <TextField\n      style={{ width: \"100%\" }}\n      onChange={(e) => {\n        setSearchText(e.target.value);\n      }}\n      // onBlur={performSearch}\n      onKeyDown={(e) => {\n        if (e.key === \"Enter\") {\n          performSearch();\n        }\n      }}\n      variant=\"outlined\"\n      placeholder=\"Search issue title or body\"\n      size=\"small\"\n    />\n  );\n};\n","import styled from \"styled-components\";\n\nexport const SearchPageStyled = styled.div`\n  margin: 20px 10px;\n  .header {\n    display: flex;\n    padding: 10px 20px;\n    border: 2px solid #e5e5e5;\n    border-radius: 5px;\n    .search-btn {\n      margin-left: 10px;\n    }\n  }\n  .issues {\n    margin-top: 20px;\n    padding: 10px 0px 20px 0px;\n    border: 2px solid #e5e5e5;\n    border-radius: 5px;\n  }\n  .status-checkboxes {\n    margin-left: 15px;\n  }\n  .no-result {\n    margin-top: 30vh;\n    padding: 10px 0px 20px 0px;\n    text-align: center;\n    font-size: 20px;\n    font-weight: 600;\n    font-color: #grey;\n    min-height: 30vh;\n  }\n  .pagination-container {\n    display: flex;\n    justify-content: center;\n    margin-top: 20px;\n    button {\n      margin: 0px 5px;\n      height: 30px;\n      text-transform: none;\n      &:disabled {\n        background-color: #e5e5e5;\n      }\n    }\n    .page {\n      height: 50px;\n      justify-content: center;\n      margin: 5px;\n    }\n  }\n`;\n","import { Button } from \"@mui/material\";\nimport React, { useState } from \"react\";\nimport { IssueListItem } from \"./components/IssueListItem\";\nimport { SearchBar } from \"./components/Searchbar\";\nimport { PAGE_SIZE, useSearchIssues } from \"../../utils\";\nimport { ShouldRender, Loading } from \"../shared\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport { SearchPageStyled } from \"./searchPage.styles\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\n\ninterface SearchPageProps {}\n\nexport const SearchPage: React.FC<SearchPageProps> = () => {\n  const [open, setOpen] = useState(true);\n  const {\n    search,\n    gotoNextPage,\n    gotoPrevPage,\n    data: issues,\n    currentPage,\n    hasMore,\n    isLoading,\n    setSearchText,\n  } = useSearchIssues();\n\n  const performSearch = () => {\n    search({ isOpen: open });\n  };\n\n  return (\n    <SearchPageStyled>\n      <div className=\"header\">\n        <SearchBar\n          setSearchText={setSearchText}\n          performSearch={performSearch}\n        />\n        <FormGroup className=\"status-checkboxes\">\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={open}\n                onClick={() => setOpen((prev) => !prev)}\n              />\n            }\n            label=\"Open\"\n          />\n        </FormGroup>\n        <Button\n          onClick={performSearch}\n          className=\"search-btn\"\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Search\n        </Button>\n      </div>\n      <ShouldRender if={isLoading}>\n        <Loading />\n      </ShouldRender>\n      <ShouldRender if={!isLoading}>\n        <>\n          <ShouldRender if={issues.length > 0}>\n            <div className=\"issues\">\n              {issues?.map((issue, index) => (\n                <IssueListItem key={`${issue.id}-${index}`} issue={issue} />\n              ))}\n            </div>\n          </ShouldRender>\n          <ShouldRender if={issues.length === 0}>\n            <div className=\"no-result\">No result found</div>\n          </ShouldRender>\n        </>\n      </ShouldRender>\n      <ShouldRender if={issues.length > 0}>\n        <div className=\"pagination-container\">\n          <Button\n            variant=\"outlined\"\n            color=\"info\"\n            size=\"small\"\n            disabled={currentPage <= 1 || isLoading}\n            onClick={() => gotoPrevPage()}\n          >\n            prvious page\n          </Button>\n          <p className=\"page\">{currentPage}</p>\n          <Button\n            variant=\"outlined\"\n            color=\"info\"\n            size=\"small\"\n            disabled={(!hasMore && issues.length < PAGE_SIZE) || isLoading}\n            onClick={() => gotoNextPage(open)}\n          >\n            Next page\n          </Button>\n        </div>\n      </ShouldRender>\n    </SearchPageStyled>\n  );\n};\n","import { GetIssueData, Issue, Comment, PAGE_SIZE } from \"../../utils\";\nimport { useLocation } from \"react-router-dom\";\nimport { useLazyQuery, useQuery } from \"@apollo/client\";\nimport { GET_ISSUE, GET_COMMENTS_OF_ISSUE } from \"../../apollo\";\nimport { useCallback, useState } from \"react\";\nimport Materilize from \"materialize-css\";\n\ninterface useFetchIssueDetailsResponse {\n  issue: Issue;\n  comments: Comment[];\n  isError: boolean;\n  isLoading: boolean;\n  hasMoreComments: boolean;\n  loadingComments: boolean;\n  fetchMoreComments: () => void;\n}\n\nexport const useFetchIssueDetails = (): useFetchIssueDetailsResponse => {\n  const { pathname } = useLocation();\n  const [data, setData] = useState<Issue>(null as unknown as Issue);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [commentsCursor, setCommentsCursor] = useState<String | null>();\n\n  const [org, repo, _, issueNum] = pathname.split(\"/\").slice(1);\n\n  const { loading, error } = useQuery<GetIssueData>(GET_ISSUE, {\n    variables: {\n      repositoryName: repo,\n      repositoryOwner: org,\n      issueNumber: parseInt(issueNum),\n      pageSize: PAGE_SIZE,\n    },\n    onCompleted: (data) => {\n      setData(data.repository.issue);\n      const comments = data.repository.issue.comments.edges;\n      comments && setComments((prev) => [...prev, ...comments]);\n      const cursor = data.repository.issue.comments.pageInfo.endCursor;\n      setCommentsCursor(cursor);\n    },\n    onError: (err) => {\n      Materilize.toast({ html: err.message });\n    },\n  });\n\n  const [fetchComments, { loading: fetchingComments }] = useLazyQuery(\n    GET_COMMENTS_OF_ISSUE,\n    {\n      onCompleted: (data) => {\n        const newComments = data.repository.issue.comments.edges;\n        setComments((prev) => [...prev, ...newComments]);\n        const newCursor = data.repository.issue.comments.pageInfo.endCursor;\n        setCommentsCursor(newCursor);\n      },\n      onError: (err) => {\n        Materilize.toast({ html: err.message });\n      },\n    }\n  );\n\n  const fetchMoreComments = useCallback(() => {\n    fetchComments({\n      variables: {\n        repositoryName: repo,\n        repositoryOwner: org,\n        issueNumber: parseInt(issueNum),\n        cursor: commentsCursor,\n        pageSize: PAGE_SIZE,\n      },\n    });\n  }, [commentsCursor, fetchComments, issueNum, org, repo]);\n\n  return {\n    issue: data as Issue,\n    hasMoreComments: !!commentsCursor && comments.length >= PAGE_SIZE,\n    comments,\n    isLoading: loading,\n    isError: !!error,\n    fetchMoreComments,\n    loadingComments: fetchingComments,\n  };\n};\n","export enum IssueState {\n  OPEN = \"OPEN\",\n  CLOSE = \"CLOSE\",\n}\n\nexport interface Actor {\n  login: String;\n  avatarUrl: String;\n  url: String;\n}\n\nexport interface Comment {\n  node: {\n    bodyHTML: String;\n    author: Actor;\n    createdAt: Date;\n  };\n}\nexport interface Comments {\n  totalCount: number;\n  edges?: Comment[];\n  pageInfo: PageInfo;\n}\n\nexport interface Issue {\n  id: String;\n  number: String;\n  state: IssueState;\n  title: String;\n  url: String;\n  bodyHTML: String;\n  closed: Boolean;\n  closedAt: String;\n  createdAt: Date;\n  author: Actor;\n  comments: Comments;\n}\n\nexport interface PageInfo {\n  endCursor: String;\n  hasNextPage: Boolean;\n  startCursor: String;\n}\n\nexport interface GetIssuesData {\n  repository: {\n    issues: {\n      edges: [\n        {\n          node: Issue;\n        }\n      ];\n      pageInfo: PageInfo;\n    };\n  };\n}\n\nexport interface SearchIssuesData {\n  search: {\n    nodes: [Issue];\n    pageInfo: PageInfo;\n  };\n}\n\nexport interface GetIssueData {\n  repository: {\n    issue: Issue;\n  };\n}\n\nexport interface GetIssueCommentsData {\n  repository: {\n    issue: {\n      comments: Comments;\n    };\n  };\n}\n","import { useLazyQuery, useQuery } from \"@apollo/client\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { GET_ISSUES_OF_REPOSITORY, SEARCH_FOR_ISSUE } from \"../../apollo\";\nimport { GetIssuesData, Issue, SearchIssuesData, PAGE_SIZE } from \"../../utils\";\nimport { useLocation } from \"react-router-dom\";\nimport Materilize from \"materialize-css\";\n\ninterface SearchInput {\n  isOpen: boolean;\n  isNextPage?: boolean;\n}\n\ninterface userSearchIssueResponse {\n  search: (props: SearchInput) => void;\n  gotoNextPage: (isOpen: boolean) => void;\n  gotoPrevPage: () => void;\n  data: Issue[];\n  isError: boolean;\n  isLoading: boolean;\n  currentPage: number;\n  hasMore: boolean;\n  setSearchText: React.Dispatch<React.SetStateAction<string>>;\n}\n\nexport const useSearchIssues = (): userSearchIssueResponse => {\n  const [result, setResult] = useState<Issue[]>([]);\n  const [searchResult, setSearchResult] = useState<Issue[]>([]);\n\n  const [isSearchActive, setIsSearchActive] = useState(false);\n\n  const [nextPage, setNextPage] = useState<null | String>(null);\n  const [searchNextPage, setSearchNextPage] = useState<null | String>(null);\n  const [currentPage, setCurrentPage] = useState<number>(0);\n\n  const [searchText, setSearchText] = useState(\"\");\n\n  const { pathname } = useLocation();\n  const [org, repo] = pathname.split(\"/\").slice(1, 3);\n  //helpers\n  const incrementPageNumber = useCallback(() => {\n    setCurrentPage((prev) => prev + 1);\n  }, []);\n  const resetPageNumber = useCallback(() => {\n    setCurrentPage(0);\n  }, []);\n  const decrementPageNumber = useCallback(() => {\n    setCurrentPage((prev) => prev - 1);\n  }, []);\n\n  const [searchIssues, { error: searchError, loading: searching }] =\n    useLazyQuery<SearchIssuesData>(SEARCH_FOR_ISSUE, {\n      onCompleted: (data) => {\n        const newItems = data.search.nodes;\n        newItems.length && incrementPageNumber();\n        const newArr = [...searchResult, ...newItems];\n        setSearchResult(newArr);\n        setSearchNextPage(data.search.pageInfo.endCursor);\n      },\n      onError: (err) => {\n        Materilize.toast({ html: err.message });\n      },\n      fetchPolicy: \"network-only\",\n    });\n\n  const {\n    error: intialLoadError,\n    loading,\n    refetch,\n  } = useQuery<GetIssuesData>(GET_ISSUES_OF_REPOSITORY, {\n    variables: {\n      repositoryOwner: org,\n      repositoryName: repo,\n      pageSize: PAGE_SIZE,\n      issueState: \"OPEN\",\n    },\n    fetchPolicy: \"cache-first\",\n    onCompleted: (data) => {\n      const newItems = data.repository.issues.edges.map((edge) => edge.node);\n      newItems.reverse();\n      newItems.length && incrementPageNumber();\n      setResult((prev) => [...prev, ...newItems]);\n      setNextPage(data.repository.issues.pageInfo.startCursor);\n    },\n    onError: (err) => {\n      Materilize.toast({ html: err.message });\n    },\n  });\n\n  const search = useCallback(\n    ({ isOpen, isNextPage }: SearchInput) => {\n      setIsSearchActive(!!searchText);\n      if (!searchText) return;\n\n      let query = `repo:${org}/${repo} type:issue ${searchText} state:${\n        isOpen ? \"open\" : \"closed\"\n      }`;\n\n      if (!isNextPage) {\n        resetPageNumber();\n        setSearchNextPage(null);\n        setSearchResult([]);\n      }\n\n      searchIssues({\n        variables: {\n          text: query,\n          pageSize: PAGE_SIZE,\n          cursor: isNextPage && searchNextPage,\n        },\n      });\n    },\n    [org, repo, resetPageNumber, searchIssues, searchNextPage, searchText]\n  );\n\n  const getNextPageForSearch = useCallback(\n    (isOpen: boolean) => {\n      search({ isNextPage: true, isOpen: isOpen });\n    },\n    [search]\n  );\n\n  const gotoNextPage = useCallback(\n    (isOpen: boolean) => {\n      if ((isSearchActive && searching) || (loading && !isSearchActive)) return;\n      if (searchText) {\n        const nextPageDataExist = searchResult.length > currentPage * PAGE_SIZE;\n        nextPageDataExist\n          ? incrementPageNumber()\n          : getNextPageForSearch(isOpen);\n      } else {\n        const nextPageDataExist = result.length > currentPage * PAGE_SIZE;\n        nextPageDataExist\n          ? incrementPageNumber()\n          : refetch({ cursor: nextPage });\n      }\n    },\n    [\n      currentPage,\n      getNextPageForSearch,\n      incrementPageNumber,\n      isSearchActive,\n      loading,\n      nextPage,\n      refetch,\n      result.length,\n      searchResult.length,\n      searchText,\n      searching,\n    ]\n  );\n\n  useEffect(() => {\n    !searchText && setIsSearchActive(false);\n  }, [searchText]);\n\n  const isError = !!(searchError || intialLoadError);\n  const isLoading = loading || searching;\n\n  const startIndex = ((currentPage || 1) - 1) * PAGE_SIZE;\n  const endIndex = startIndex + PAGE_SIZE;\n  const resultArr = isSearchActive ? searchResult : result;\n\n  return {\n    search,\n    data: resultArr.slice(startIndex, endIndex),\n    currentPage,\n    hasMore: searchText ? !!searchNextPage : !!nextPage,\n    isError,\n    isLoading,\n    gotoNextPage,\n    gotoPrevPage: decrementPageNumber,\n    setSearchText,\n  };\n};\n"],"names":["GET_ISSUES_OF_REPOSITORY","gql","GET_ISSUE","SEARCH_FOR_ISSUE","GET_COMMENTS_OF_ISSUE","IssueListItemWrapper","styled","IssueListItem","issue","title","state","createdAt","author","comments","totalComments","totalCount","login","history","useHistory","pathname","useLocation","content","number","moment","fromNow","onClick","push","className","SearchBar","setSearchText","performSearch","TextField","style","width","onChange","e","target","value","onKeyDown","key","variant","placeholder","size","SearchPageStyled","SearchPage","useState","open","setOpen","useSearchIssues","search","gotoNextPage","gotoPrevPage","issues","data","currentPage","hasMore","isLoading","isOpen","FormGroup","FormControlLabel","control","Checkbox","checked","prev","label","Button","color","if","length","map","index","id","disabled","PAGE_SIZE","useFetchIssueDetails","setData","setComments","commentsCursor","setCommentsCursor","split","slice","org","repo","issueNum","useQuery","variables","repositoryName","repositoryOwner","issueNumber","parseInt","pageSize","onCompleted","repository","edges","cursor","pageInfo","endCursor","onError","err","Materilize","html","message","loading","error","useLazyQuery","newComments","newCursor","fetchComments","fetchingComments","fetchMoreComments","useCallback","hasMoreComments","isError","loadingComments","IssueState","result","setResult","searchResult","setSearchResult","isSearchActive","setIsSearchActive","nextPage","setNextPage","searchNextPage","setSearchNextPage","setCurrentPage","searchText","incrementPageNumber","resetPageNumber","decrementPageNumber","newItems","nodes","newArr","fetchPolicy","searchIssues","searchError","searching","issueState","edge","node","reverse","startCursor","intialLoadError","refetch","isNextPage","query","text","getNextPageForSearch","useEffect","startIndex","endIndex"],"sourceRoot":""}